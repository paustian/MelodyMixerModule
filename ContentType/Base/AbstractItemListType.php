<?php

/**
 * MelodyMixer.
 *
 * @copyright Timothy Paustian (Paustian)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Timothy Paustian <tdpaustian@gmail.com>.
 * @see https://www.microbiologytextbook.com
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Paustian\MelodyMixerModule\ContentType\Base;

use Zikula\ExtensionsModule\ModuleInterface\Content\AbstractContentType;
use Paustian\MelodyMixerModule\ContentType\Form\Type\ItemListType as FormType;
use Paustian\MelodyMixerModule\Entity\Factory\EntityFactory;
use Paustian\MelodyMixerModule\Helper\ControllerHelper;
use Paustian\MelodyMixerModule\Helper\ModelHelper;
use Paustian\MelodyMixerModule\Helper\PermissionHelper;

/**
 * Generic item list content type base class.
 */
abstract class AbstractItemListType extends AbstractContentType
{
    /**
     * @var ControllerHelper
     */
    protected $controllerHelper;
    
    /**
     * @var ModelHelper
     */
    protected $modelHelper;
    
    /**
     * @var PermissionHelper
     */
    protected $modulePermissionHelper;
    
    /**
     * @var EntityFactory
     */
    protected $entityFactory;
    
    public function getIcon(): string
    {
        return 'th-list';
    }
    
    public function getTitle(): string
    {
        return $this->translator->trans('Melody mixer list');
    }
    
    public function getDescription(): string
    {
        return $this->translator->trans('Display a list of melody mixer objects.');
    }
    
    public function getDefaultData(): array
    {
        return [
            'objectType' => 'gameScore',
            'sorting' => 'default',
            'amount' => 1,
            'template' => 'itemlist_display.html.twig',
            'customTemplate' => null,
            'filter' => ''
        ];
    }
    
    public function getData(): array
    {
        $data = parent::getData();
    
        $contextArgs = ['name' => 'list'];
        $allowedObjectTypes = $this->controllerHelper->getObjectTypes('contentType', $contextArgs);
        if (
            !isset($data['objectType'])
            || !in_array($data['objectType'], $allowedObjectTypes, true)
        ) {
            $data['objectType'] = $this->controllerHelper->getDefaultObjectType('contentType', $contextArgs);
        }
    
        if (!isset($data['template'])) {
            $data['template'] = 'itemlist_' . $data['objectType'] . '_display.html.twig';
        }
        $this->data = $data;
    
        return $data;
    }
    
    public function displayView(): string
    {
        $objectType = $this->data['objectType'];
        $repository = $this->entityFactory->getRepository($objectType);
    
        // create query
        $orderBy = $this->modelHelper->resolveSortParameter($this->data['objectType'], $this->data['sorting']);
        $qb = $repository->getListQueryBuilder($this->data['filter'], $orderBy);
    
        // get objects from database
        $currentPage = 1;
        $resultsPerPage = isset($this->data['amount']) ? $this->data['amount'] : 1;
        $paginator = $repository->retrieveCollectionResult($qb, true, $currentPage, $resultsPerPage);
        $entities = $paginator->getResults();
    
        // filter by permissions
        $entities = $this->modulePermissionHelper->filterCollection($objectType, $entities, ACCESS_READ);
    
        $data = $this->data;
        $data['items'] = $entities;
    
        $data = $this->controllerHelper->addTemplateParameters($objectType, $data, 'contentType', []);
        $this->data = $data;
    
        return parent::displayView();
    }
    
    public function getViewTemplatePath(string $suffix = ''): string
    {
        $templateFile = $this->data['template'];
        if (
            'custom' === $templateFile
            && null !== $this->data['customTemplate']
            && '' !== $this->data['customTemplate']
        ) {
            $templateFile = $this->data['customTemplate'];
        }
    
        $templateForObjectType = str_replace('itemlist_', 'itemlist_' . $this->data['objectType'] . '_', $templateFile);
    
        $templateOptions = [
            'ContentType/' . $templateForObjectType,
            'ContentType/' . $templateFile,
            'ContentType/itemlist_display.html.twig'
        ];
    
        $template = '';
        foreach ($templateOptions as $templatePath) {
            if ($this->twigLoader->exists('@PaustianMelodyMixerModule/' . $templatePath)) {
                $template = '@PaustianMelodyMixerModule/' . $templatePath;
                break;
            }
        }
    
        return $template;
    }
    
    public function getEditFormClass(): string
    {
        return FormType::class;
    }
    
    public function getEditFormOptions($context): array
    {
        $options = parent::getEditFormOptions($context);
        $data = $this->getData();
        $options['object_type'] = $data['objectType'];
    
        return $options;
    }
    
    /**
     * @required
     */
    public function setControllerHelper(ControllerHelper $controllerHelper): void
    {
        $this->controllerHelper = $controllerHelper;
    }
    
    /**
     * @required
     */
    public function setModelHelper(ModelHelper $modelHelper): void
    {
        $this->modelHelper = $modelHelper;
    }
    
    /**
     * @required
     */
    public function setModulePermissionHelper(PermissionHelper $modulePermissionHelper): void
    {
        $this->modulePermissionHelper = $modulePermissionHelper;
    }
    
    /**
     * @required
     */
    public function setEntityFactory(EntityFactory $entityFactory): void
    {
        $this->entityFactory = $entityFactory;
    }
}
