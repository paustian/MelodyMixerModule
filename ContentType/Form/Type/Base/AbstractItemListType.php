<?php

/**
 * MelodyMixer.
 *
 * @copyright Timothy Paustian (Paustian)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Timothy Paustian <tdpaustian@gmail.com>.
 * @see https://www.microbiologytextbook.com
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Paustian\MelodyMixerModule\ContentType\Form\Type\Base;

use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Translation\Extractor\Annotation\Ignore;
use Translation\Extractor\Annotation\Translate;
use Zikula\ExtensionsModule\ModuleInterface\Content\ContentTypeInterface;
use Zikula\ExtensionsModule\ModuleInterface\Content\Form\Type\AbstractContentFormType;

/**
 * List content type form type base class.
 */
abstract class AbstractItemListType extends AbstractContentFormType
{
    public function __construct(
    ) {
    }

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addObjectTypeField($builder, $options);
        $this->addSortingField($builder, $options);
        $this->addAmountField($builder, $options);
        $this->addTemplateFields($builder, $options);
        $this->addFilterField($builder, $options);
    }

    /**
     * Adds an object type field.
     */
    public function addObjectTypeField(FormBuilderInterface $builder, array $options = []): void
    {
        $helpText = /** @Translate */'If you change this please save the element once to reload the parameters below.';
        $builder->add('objectType', ChoiceType::class, [
            'label' => 'Object type:',
            'empty_data' => 'gameScore',
            'attr' => [
                /** @Ignore */
                'title' => $helpText
            ],
            /** @Ignore */
            'help' => $helpText,
            'choices' => [
                'Game scores' => 'gameScore',
                'Scores' => 'score',
                'Levels' => 'level',
                'Graphics and sound' => 'graphicsAndSound',
                'Music scores' => 'musicScore'
            ],
            'multiple' => false,
            'expanded' => false
        ]);
    }

    /**
     * Adds a sorting field.
     */
    public function addSortingField(FormBuilderInterface $builder, array $options = []): void
    {
        $builder->add('sorting', ChoiceType::class, [
            'label' => 'Sorting:',
            'label_attr' => [
                'class' => 'radio-custom'
            ],
            'empty_data' => 'default',
            'choices' => [
                'Random' => 'random',
                'Newest' => 'newest',
                'Updated' => 'updated',
                'Default' => 'default'
            ],
            'multiple' => false,
            'expanded' => true
        ]);
    }

    /**
     * Adds a page size field.
     */
    public function addAmountField(FormBuilderInterface $builder, array $options = []): void
    {
        $helpText = /** @Translate */'The maximum amount of items to be shown.'
            . ' ' . /** @Translate */'Only digits are allowed.'
        ;
        $builder->add('amount', IntegerType::class, [
            'label' => 'Amount:',
            'attr' => [
                'maxlength' => 2,
                /** @Ignore */
                'title' => $helpText
            ],
            /** @Ignore */
            'help' => $helpText,
            'empty_data' => 5
        ]);
    }

    /**
     * Adds template fields.
     */
    public function addTemplateFields(FormBuilderInterface $builder, array $options = []): void
    {
        $builder->add('template', ChoiceType::class, [
            'label' => 'Template:',
            'empty_data' => 'itemlist_display.html.twig',
            'choices' => [
                'Only item titles' => 'itemlist_display.html.twig',
                'With description' => 'itemlist_display_description.html.twig',
                'Custom template' => 'custom'
            ],
            'multiple' => false,
            'expanded' => false
        ]);
        $exampleTemplate = 'itemlist_[objectType]_display.html.twig';
        $builder->add('customTemplate', TextType::class, [
            'label' => 'Custom template:',
            'required' => false,
            'attr' => [
                'maxlength' => 80,
                /** @Ignore */
                'title' => /** @Translate */'Example' . ': ' . $exampleTemplate
            ],
            /** @Ignore */
            'help' => /** @Translate */'Example' . ': <code>' . $exampleTemplate . '</code>',
            'help_html' => true
        ]);
    }

    /**
     * Adds a filter field.
     */
    public function addFilterField(FormBuilderInterface $builder, array $options = []): void
    {
        $builder->add('filter', TextType::class, [
            'label' => 'Filter (expert option):',
            'required' => false,
            'attr' => [
                'maxlength' => 255,
                /** @Ignore */
                'title' => /** @Translate */'Example' . ': tbl.age >= 18'
            ],
            /** @Ignore */
            'help' => /** @Translate */'Example' . ': tbl.age >= 18'
        ]);
    }

    public function getBlockPrefix()
    {
        return 'paustianmelodymixermodule_contenttype_list';
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver
            ->setDefaults([
                'context' => ContentTypeInterface::CONTEXT_EDIT,
                'object_type' => 'gameScore'
            ])
            ->setRequired(['object_type'])
            ->setAllowedTypes('context', 'string')
            ->setAllowedTypes('object_type', 'string')
            ->setAllowedValues('context', [ContentTypeInterface::CONTEXT_EDIT, ContentTypeInterface::CONTEXT_TRANSLATION])
        ;
    }
}
