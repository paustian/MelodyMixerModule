<?php

/**
 * MelodyMixer.
 *
 * @copyright Timothy Paustian (Paustian)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Timothy Paustian <tdpaustian@gmail.com>.
 * @see https://www.microbiologytextbook.com
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Paustian\MelodyMixerModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Zikula\Bundle\CoreBundle\Doctrine\EntityAccess;
use Zikula\UsersModule\Entity\UserEntity;
use Paustian\MelodyMixerModule\Traits\StandardFieldsTrait;
use Paustian\MelodyMixerModule\Validator\Constraints as MelodyMixerAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for game score entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractGameScoreEntity extends EntityAccess
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'gameScore';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var int $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     *
     * @ORM\Column(length=20)
     * @Assert\NotBlank
     * @MelodyMixerAssert\ListEntry(entityName="gameScore", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\ManyToOne(targetEntity="Zikula\UsersModule\Entity\UserEntity")
     * @ORM\JoinColumn(referencedColumnName="uid")
     * @Assert\NotBlank
     * @var UserEntity $playerUid
     */
    protected $playerUid = 0;
    
    /**
     * The email address of the player
     *
     * @ORM\Column(length=255)
     * @Assert\NotBlank
     * @Assert\Length(min="0", max="255", allowEmptyString="false")
     * @Assert\Email(mode="html5")
     * @var string $playerEmail
     */
    protected $playerEmail = '';
    
    /**
     * The first name of the player
     *
     * @ORM\Column(length=255)
     * @Assert\NotBlank
     * @Assert\Length(min="0", max="255", allowEmptyString="false")
     * @var string $firstName
     */
    protected $firstName = '';
    
    /**
     * The last name of the player
     *
     * @ORM\Column(length=255)
     * @Assert\NotBlank
     * @Assert\Length(min="0", max="255", allowEmptyString="false")
     * @var string $lastName
     */
    protected $lastName = '';
    
    
    /**
     * Unidirectional - One gameScore [game score] has many scores [scores] (INVERSE SIDE).
     *
     * @ORM\ManyToMany(
     *     targetEntity="Paustian\MelodyMixerModule\Entity\ScoreEntity"
     * )
     * @ORM\JoinTable(name="paustian_melody_gamescorescores")
     * @var \Paustian\MelodyMixerModule\Entity\ScoreEntity[] $scores
     */
    protected $scores = null;
    
    
    /**
     * GameScoreEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->scores = new ArrayCollection();
    }
    
    public function get_objectType(): string
    {
        return $this->_objectType;
    }
    
    public function set_objectType(string $_objectType): void
    {
        if ($this->_objectType !== $_objectType) {
            $this->_objectType = $_objectType ?? '';
        }
    }
    
    public function getId(): ?int
    {
        return $this->id;
    }
    
    public function setId(int $id = null): void
    {
        if ((int)$this->id !== $id) {
            $this->id = $id;
        }
    }
    
    public function getWorkflowState(): string
    {
        return $this->workflowState;
    }
    
    public function setWorkflowState(string $workflowState): void
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = $workflowState ?? '';
        }
    }
    
    public function getPlayerUid()/*: UserEntity*/
    {
        return $this->playerUid;
    }
    
    public function setPlayerUid(/*UserEntity */$playerUid): void
    {
        if ($this->playerUid !== $playerUid) {
            if ($playerUid instanceof UserEntity) {
                $this->playerUid = $playerUid;
            }
        }
    }
    
    public function getPlayerEmail(): string
    {
        return $this->playerEmail;
    }
    
    public function setPlayerEmail(string $playerEmail): void
    {
        if ($this->playerEmail !== $playerEmail) {
            $this->playerEmail = $playerEmail ?? '';
        }
    }
    
    public function getFirstName(): string
    {
        return $this->firstName;
    }
    
    public function setFirstName(string $firstName): void
    {
        if ($this->firstName !== $firstName) {
            $this->firstName = $firstName ?? '';
        }
    }
    
    public function getLastName(): string
    {
        return $this->lastName;
    }
    
    public function setLastName(string $lastName): void
    {
        if ($this->lastName !== $lastName) {
            $this->lastName = $lastName ?? '';
        }
    }
    
    public function getScores()
    {
        return $this->scores;
    }
    
    public function setScores($scores = null): void
    {
        foreach ($this->scores as $scoreSingle) {
            $this->removeScores($scoreSingle);
        }
        foreach ($scores as $scoreSingle) {
            $this->addScores($scoreSingle);
        }
    }
    
    /**
     * Adds an instance of \Paustian\MelodyMixerModule\Entity\ScoreEntity to the list of scores.
     */
    public function addScores(\Paustian\MelodyMixerModule\Entity\ScoreEntity $score): void
    {
        $this->scores->add($score);
    }
    
    /**
     * Removes an instance of \Paustian\MelodyMixerModule\Entity\ScoreEntity from the list of scores.
     */
    public function removeScores(\Paustian\MelodyMixerModule\Entity\ScoreEntity $score): void
    {
        $this->scores->removeElement($score);
    }
    
    /**
     * Checks whether the playerUid field contains a valid user reference.
     * This method is used for validation.
     *
     * @Assert\IsTrue(message="This value must be a valid user id.")
     */
    public function isPlayerUidUserValid(): bool
    {
        return $this['playerUid'] instanceof UserEntity;
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     */
    public function createUrlArgs(): array
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     */
    public function getKey(): ?int
    {
        return $this->getId();
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     */
    public function getRelatedObjectsToPersist(array &$objects = []): array
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     */
    public function __toString(): string
    {
        return 'Game score ' . $this->getKey() . ': ' . $this->getFirstName();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    }
}
