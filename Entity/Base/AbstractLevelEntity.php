<?php

/**
 * MelodyMixer.
 *
 * @copyright Timothy Paustian (Paustian)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Timothy Paustian <tdpaustian@gmail.com>.
 * @see https://www.microbiologytextbook.com
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Paustian\MelodyMixerModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Bundle\CoreBundle\Doctrine\EntityAccess;
use Paustian\MelodyMixerModule\Traits\StandardFieldsTrait;
use Paustian\MelodyMixerModule\Validator\Constraints as MelodyMixerAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for level entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractLevelEntity extends EntityAccess
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'level';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var int $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     *
     * @ORM\Column(length=20)
     * @Assert\NotBlank
     * @MelodyMixerAssert\ListEntry(entityName="level", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * The name of the level for Melody Mixer
     *
     * @ORM\Column(length=255)
     * @Assert\NotBlank
     * @Assert\Length(min="0", max="255", allowEmptyString="false")
     * @var string $levelName
     */
    protected $levelName = '';
    
    /**
     * The ID of this level. This must match the ID in Graphics and Sounds and Music Scores
     *
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var int $levelNum
     */
    protected $levelNum = 0;
    
    /**
     * The example number in the level. Normally 1 to 10
     *
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var int $exNum
     */
    protected $exNum = 0;
    
    
    /**
     * Unidirectional - One level [level] has many graphicsAndSound [graphics and sound] (INVERSE SIDE).
     *
     * @ORM\ManyToMany(
     *     targetEntity="Paustian\MelodyMixerModule\Entity\GraphicsAndSoundEntity"
     * )
     * @ORM\JoinTable(name="paustian_melody_levelgraphicsandsound")
     * @var \Paustian\MelodyMixerModule\Entity\GraphicsAndSoundEntity[] $graphicsAndSound
     */
    protected $graphicsAndSound = null;
    
    /**
     * Unidirectional - One level [level] has many musicScores [music scores] (INVERSE SIDE).
     *
     * @ORM\ManyToMany(
     *     targetEntity="Paustian\MelodyMixerModule\Entity\MusicScoreEntity"
     * )
     * @ORM\JoinTable(name="paustian_melody_levelmusicscores")
     * @var \Paustian\MelodyMixerModule\Entity\MusicScoreEntity[] $musicScores
     */
    protected $musicScores = null;
    
    
    /**
     * LevelEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
        $this->graphicsAndSound = new ArrayCollection();
        $this->musicScores = new ArrayCollection();
    }
    
    public function get_objectType(): string
    {
        return $this->_objectType;
    }
    
    public function set_objectType(string $_objectType): void
    {
        if ($this->_objectType !== $_objectType) {
            $this->_objectType = $_objectType ?? '';
        }
    }
    
    public function getId(): ?int
    {
        return $this->id;
    }
    
    public function setId(int $id = null): void
    {
        if ((int)$this->id !== $id) {
            $this->id = $id;
        }
    }
    
    public function getWorkflowState(): string
    {
        return $this->workflowState;
    }
    
    public function setWorkflowState(string $workflowState): void
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = $workflowState ?? '';
        }
    }
    
    public function getLevelName(): string
    {
        return $this->levelName;
    }
    
    public function setLevelName(string $levelName): void
    {
        if ($this->levelName !== $levelName) {
            $this->levelName = $levelName ?? '';
        }
    }
    
    public function getLevelNum(): int
    {
        return $this->levelNum;
    }
    
    public function setLevelNum(int $levelNum): void
    {
        if ((int)$this->levelNum !== $levelNum) {
            $this->levelNum = $levelNum;
        }
    }
    
    public function getExNum(): int
    {
        return $this->exNum;
    }
    
    public function setExNum(int $exNum): void
    {
        if ((int)$this->exNum !== $exNum) {
            $this->exNum = $exNum;
        }
    }
    
    public function getGraphicsAndSound()
    {
        return $this->graphicsAndSound;
    }
    
    public function setGraphicsAndSound($graphicsAndSound = null): void
    {
        foreach ($this->graphicsAndSound as $graphicsAndSoundSingle) {
            $this->removeGraphicsAndSound($graphicsAndSoundSingle);
        }
        foreach ($graphicsAndSound as $graphicsAndSoundSingle) {
            $this->addGraphicsAndSound($graphicsAndSoundSingle);
        }
    }
    
    /**
     * Adds an instance of \Paustian\MelodyMixerModule\Entity\GraphicsAndSoundEntity to the list of graphics and sound.
     */
    public function addGraphicsAndSound(\Paustian\MelodyMixerModule\Entity\GraphicsAndSoundEntity $graphicsAndSound): void
    {
        $this->graphicsAndSound->add($graphicsAndSound);
    }
    
    /**
     * Removes an instance of \Paustian\MelodyMixerModule\Entity\GraphicsAndSoundEntity from the list of graphics and sound.
     */
    public function removeGraphicsAndSound(\Paustian\MelodyMixerModule\Entity\GraphicsAndSoundEntity $graphicsAndSound): void
    {
        $this->graphicsAndSound->removeElement($graphicsAndSound);
    }
    
    public function getMusicScores()
    {
        return $this->musicScores;
    }
    
    public function setMusicScores($musicScores = null): void
    {
        foreach ($this->musicScores as $musicScoreSingle) {
            $this->removeMusicScores($musicScoreSingle);
        }
        foreach ($musicScores as $musicScoreSingle) {
            $this->addMusicScores($musicScoreSingle);
        }
    }
    
    /**
     * Adds an instance of \Paustian\MelodyMixerModule\Entity\MusicScoreEntity to the list of music scores.
     */
    public function addMusicScores(\Paustian\MelodyMixerModule\Entity\MusicScoreEntity $musicScore): void
    {
        $this->musicScores->add($musicScore);
    }
    
    /**
     * Removes an instance of \Paustian\MelodyMixerModule\Entity\MusicScoreEntity from the list of music scores.
     */
    public function removeMusicScores(\Paustian\MelodyMixerModule\Entity\MusicScoreEntity $musicScore): void
    {
        $this->musicScores->removeElement($musicScore);
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     */
    public function createUrlArgs(): array
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     */
    public function getKey(): ?int
    {
        return $this->getId();
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     */
    public function getRelatedObjectsToPersist(array &$objects = []): array
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     */
    public function __toString(): string
    {
        return 'Level ' . $this->getKey() . ': ' . $this->getLevelName();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    }
}
