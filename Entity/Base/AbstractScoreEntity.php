<?php

/**
 * MelodyMixer.
 *
 * @copyright Timothy Paustian (Paustian)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Timothy Paustian <tdpaustian@gmail.com>.
 * @see https://www.microbiologytextbook.com
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Paustian\MelodyMixerModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Bundle\CoreBundle\Doctrine\EntityAccess;
use Paustian\MelodyMixerModule\Traits\StandardFieldsTrait;
use Paustian\MelodyMixerModule\Validator\Constraints as MelodyMixerAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for score entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractScoreEntity extends EntityAccess
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'score';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var int $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     *
     * @ORM\Column(length=20)
     * @Assert\NotBlank
     * @MelodyMixerAssert\ListEntry(entityName="score", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var int $levelId
     */
    protected $levelId = 0;
    
    /**
     * The uid of the player
     *
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var int $playerUid
     */
    protected $playerUid = 0;
    
    /**
     * The name of the level
     *
     * @ORM\Column(length=255)
     * @Assert\NotBlank
     * @Assert\Length(min="0", max="255", allowEmptyString="false")
     * @var string $levelName
     */
    protected $levelName = '';
    
    /**
     * Score on the first level
     *
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull
     * @Assert\LessThanOrEqual(value=100)
     * @var int $scoreOne
     */
    protected $scoreOne = 0;
    
    /**
     * Score on the 2nd level
     *
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull
     * @Assert\LessThanOrEqual(value=100)
     * @var int $scoreTwo
     */
    protected $scoreTwo = 0;
    
    /**
     * Score on the third level
     *
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull
     * @Assert\LessThanOrEqual(value=100)
     * @var int $scoreThree
     */
    protected $scoreThree = 0;
    
    /**
     * Score on the fourth level
     *
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull
     * @Assert\LessThanOrEqual(value=100)
     * @var int $scoreFour
     */
    protected $scoreFour = 0;
    
    /**
     * Score on the fifth level
     *
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull
     * @Assert\LessThanOrEqual(value=100)
     * @var int $scoreFive
     */
    protected $scoreFive = 0;
    
    /**
     * Score on the sixth level
     *
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull
     * @Assert\LessThanOrEqual(value=100)
     * @var int $scoreSix
     */
    protected $scoreSix = 0;
    
    /**
     * Score on the seventh level
     *
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull
     * @Assert\LessThanOrEqual(value=100)
     * @var int $scoreSeven
     */
    protected $scoreSeven = 0;
    
    /**
     * Score on the eighth level
     *
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull
     * @Assert\LessThanOrEqual(value=100)
     * @var int $scoreEight
     */
    protected $scoreEight = 0;
    
    /**
     * Score on the ninth level
     *
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull
     * @Assert\LessThanOrEqual(value=100)
     * @var int $scoreNine
     */
    protected $scoreNine = 0;
    
    /**
     * Score on the tenth level
     *
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull
     * @Assert\LessThanOrEqual(value=100)
     * @var int $scoreTen
     */
    protected $scoreTen = 0;
    
    
    
    /**
     * ScoreEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
    }
    
    public function get_objectType(): string
    {
        return $this->_objectType;
    }
    
    public function set_objectType(string $_objectType): void
    {
        if ($this->_objectType !== $_objectType) {
            $this->_objectType = $_objectType ?? '';
        }
    }
    
    public function getId(): ?int
    {
        return $this->id;
    }
    
    public function setId(int $id = null): void
    {
        if ((int)$this->id !== $id) {
            $this->id = $id;
        }
    }
    
    public function getWorkflowState(): string
    {
        return $this->workflowState;
    }
    
    public function setWorkflowState(string $workflowState): void
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = $workflowState ?? '';
        }
    }
    
    public function getLevelId(): int
    {
        return $this->levelId;
    }
    
    public function setLevelId(int $levelId): void
    {
        if ((int)$this->levelId !== $levelId) {
            $this->levelId = $levelId;
        }
    }
    
    public function getPlayerUid(): int
    {
        return $this->playerUid;
    }
    
    public function setPlayerUid(int $playerUid): void
    {
        if ((int)$this->playerUid !== $playerUid) {
            $this->playerUid = $playerUid;
        }
    }
    
    public function getLevelName(): string
    {
        return $this->levelName;
    }
    
    public function setLevelName(string $levelName): void
    {
        if ($this->levelName !== $levelName) {
            $this->levelName = $levelName ?? '';
        }
    }
    
    public function getScoreOne(): int
    {
        return $this->scoreOne;
    }
    
    public function setScoreOne(int $scoreOne): void
    {
        if ((int)$this->scoreOne !== $scoreOne) {
            $this->scoreOne = $scoreOne;
        }
    }
    
    public function getScoreTwo(): int
    {
        return $this->scoreTwo;
    }
    
    public function setScoreTwo(int $scoreTwo): void
    {
        if ((int)$this->scoreTwo !== $scoreTwo) {
            $this->scoreTwo = $scoreTwo;
        }
    }
    
    public function getScoreThree(): int
    {
        return $this->scoreThree;
    }
    
    public function setScoreThree(int $scoreThree): void
    {
        if ((int)$this->scoreThree !== $scoreThree) {
            $this->scoreThree = $scoreThree;
        }
    }
    
    public function getScoreFour(): int
    {
        return $this->scoreFour;
    }
    
    public function setScoreFour(int $scoreFour): void
    {
        if ((int)$this->scoreFour !== $scoreFour) {
            $this->scoreFour = $scoreFour;
        }
    }
    
    public function getScoreFive(): int
    {
        return $this->scoreFive;
    }
    
    public function setScoreFive(int $scoreFive): void
    {
        if ((int)$this->scoreFive !== $scoreFive) {
            $this->scoreFive = $scoreFive;
        }
    }
    
    public function getScoreSix(): int
    {
        return $this->scoreSix;
    }
    
    public function setScoreSix(int $scoreSix): void
    {
        if ((int)$this->scoreSix !== $scoreSix) {
            $this->scoreSix = $scoreSix;
        }
    }
    
    public function getScoreSeven(): int
    {
        return $this->scoreSeven;
    }
    
    public function setScoreSeven(int $scoreSeven): void
    {
        if ((int)$this->scoreSeven !== $scoreSeven) {
            $this->scoreSeven = $scoreSeven;
        }
    }
    
    public function getScoreEight(): int
    {
        return $this->scoreEight;
    }
    
    public function setScoreEight(int $scoreEight): void
    {
        if ((int)$this->scoreEight !== $scoreEight) {
            $this->scoreEight = $scoreEight;
        }
    }
    
    public function getScoreNine(): int
    {
        return $this->scoreNine;
    }
    
    public function setScoreNine(int $scoreNine): void
    {
        if ((int)$this->scoreNine !== $scoreNine) {
            $this->scoreNine = $scoreNine;
        }
    }
    
    public function getScoreTen(): int
    {
        return $this->scoreTen;
    }
    
    public function setScoreTen(int $scoreTen): void
    {
        if ((int)$this->scoreTen !== $scoreTen) {
            $this->scoreTen = $scoreTen;
        }
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     */
    public function createUrlArgs(): array
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     */
    public function getKey(): ?int
    {
        return $this->getId();
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     */
    public function getRelatedObjectsToPersist(array &$objects = []): array
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     */
    public function __toString(): string
    {
        return 'Score ' . $this->getKey() . ': ' . $this->getLevelName();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    }
}
