<?php

/**
 * MelodyMixer.
 *
 * @copyright Timothy Paustian (Paustian)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Timothy Paustian <tdpaustian@gmail.com>.
 * @see https://www.microbiologytextbook.com
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Paustian\MelodyMixerModule\Controller;

use Paustian\MelodyMixerModule\Controller\Base\AbstractLevelController;
use Paustian\MelodyMixerModule\Form\Type\FillLevelType;
use Psr\Log\LoggerInterface;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Symfony\Component\Routing\RouterInterface;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Zikula\Bundle\CoreBundle\Response\PlainResponse;
use Zikula\ThemeModule\Engine\Annotation\Theme;
use Zikula\ThemeModule\Engine\AssetFilter;
use Zikula\UsersModule\Api\ApiInterface\CurrentUserApiInterface;
use Paustian\MelodyMixerModule\Entity\LevelEntity;
use Paustian\MelodyMixerModule\Entity\Factory\EntityFactory;
use Paustian\MelodyMixerModule\Form\Handler\Level\EditHandler;
use Paustian\MelodyMixerModule\Helper\ControllerHelper;
use Paustian\MelodyMixerModule\Helper\PermissionHelper;
use Paustian\MelodyMixerModule\Helper\ViewHelper;
use Paustian\MelodyMixerModule\Helper\WorkflowHelper;

/**
 * Level controller class providing navigation and interaction functionality.
 */
class LevelController extends AbstractLevelController
{
    /**
     *
     * @Route("/admin/level/edit/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"id" = "0", "_format" = "html"},
     *        methods = {"GET", "POST"}
     * )
     * @Theme("admin")
     */
    public function adminEditAction(
        Request $request,
        PermissionHelper $permissionHelper,
        ControllerHelper $controllerHelper,
        ViewHelper $viewHelper,
        EditHandler $formHandler
    ): Response {
        return $this->editInternal(
            $request,
            $permissionHelper,
            $controllerHelper,
            $viewHelper,
            $formHandler,
            true
        );
    }
    
    /**
     *
     * @Route("/level/edit/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"id" = "0", "_format" = "html"},
     *        methods = {"GET", "POST"}
     * )
     */
    public function editAction(
        Request $request,
        PermissionHelper $permissionHelper,
        ControllerHelper $controllerHelper,
        ViewHelper $viewHelper,
        EditHandler $formHandler
    ): Response {
        return $this->editInternal(
            $request,
            $permissionHelper,
            $controllerHelper,
            $viewHelper,
            $formHandler,
            false
        );
    }
    
    /**
     *
     * @Route("/admin/levels/view/{sort}/{sortdir}/{page}/{num}.{_format}",
     *        requirements = {"sortdir" = "asc|desc|ASC|DESC", "page" = "\d+", "num" = "\d+", "_format" = "html|csv|rss|atom|xml|json"},
     *        defaults = {"sort" = "", "sortdir" = "asc", "page" = 1, "num" = 10, "_format" = "html"},
     *        methods = {"GET"}
     * )
     * @Theme("admin")
     */
    public function adminViewAction(
        Request $request,
        RouterInterface $router,
        PermissionHelper $permissionHelper,
        ControllerHelper $controllerHelper,
        ViewHelper $viewHelper,
        string $sort,
        string $sortdir,
        int $page,
        int $num
    ): Response {
        return $this->viewInternal(
            $request,
            $router,
            $permissionHelper,
            $controllerHelper,
            $viewHelper,
            $sort,
            $sortdir,
            $page,
            $num,
            true
        );
    }
    
    /**
     *
     * @Route("/levels/view/{sort}/{sortdir}/{page}/{num}.{_format}",
     *        requirements = {"sortdir" = "asc|desc|ASC|DESC", "page" = "\d+", "num" = "\d+", "_format" = "html|csv|rss|atom|xml|json"},
     *        defaults = {"sort" = "", "sortdir" = "asc", "page" = 1, "num" = 10, "_format" = "html"},
     *        methods = {"GET"}
     * )
     */
    public function viewAction(
        Request $request,
        RouterInterface $router,
        PermissionHelper $permissionHelper,
        ControllerHelper $controllerHelper,
        ViewHelper $viewHelper,
        string $sort,
        string $sortdir,
        int $page,
        int $num
    ): Response {
        return $this->viewInternal(
            $request,
            $router,
            $permissionHelper,
            $controllerHelper,
            $viewHelper,
            $sort,
            $sortdir,
            $page,
            $num,
            false
        );
    }
    
    /**
     *
     * @Route("/admin/level/delete/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"_format" = "html"},
     *        methods = {"GET", "POST"}
     * )
     * @Theme("admin")
     */
    public function adminDeleteAction(
        Request $request,
        LoggerInterface $logger,
        PermissionHelper $permissionHelper,
        ControllerHelper $controllerHelper,
        ViewHelper $viewHelper,
        EntityFactory $entityFactory,
        CurrentUserApiInterface $currentUserApi,
        WorkflowHelper $workflowHelper,
        int $id
    ): Response {
        return $this->deleteInternal(
            $request,
            $logger,
            $permissionHelper,
            $controllerHelper,
            $viewHelper,
            $entityFactory,
            $currentUserApi,
            $workflowHelper,
            $id,
            true
        );
    }
    
    /**
     *
     * @Route("/level/delete/{id}.{_format}",
     *        requirements = {"id" = "\d+", "_format" = "html"},
     *        defaults = {"_format" = "html"},
     *        methods = {"GET", "POST"}
     * )
     */
    public function deleteAction(
        Request $request,
        LoggerInterface $logger,
        PermissionHelper $permissionHelper,
        ControllerHelper $controllerHelper,
        ViewHelper $viewHelper,
        EntityFactory $entityFactory,
        CurrentUserApiInterface $currentUserApi,
        WorkflowHelper $workflowHelper,
        int $id
    ): Response {
        return $this->deleteInternal(
            $request,
            $logger,
            $permissionHelper,
            $controllerHelper,
            $viewHelper,
            $entityFactory,
            $currentUserApi,
            $workflowHelper,
            $id,
            false
        );
    }
    
    /**
     * Process status changes for multiple items.
     *
     * @Route("/admin/levels/handleSelectedEntries",
     *        methods = {"POST"}
     * )
     * @Theme("admin")
     */
    public function adminHandleSelectedEntriesAction(
        Request $request,
        LoggerInterface $logger,
        EntityFactory $entityFactory,
        WorkflowHelper $workflowHelper,
        CurrentUserApiInterface $currentUserApi
    ): RedirectResponse {
        return $this->handleSelectedEntriesActionInternal(
            $request,
            $logger,
            $entityFactory,
            $workflowHelper,
            $currentUserApi,
            true
        );
    }
    
    /**
     * Process status changes for multiple items.
     *
     * @Route("/levels/handleSelectedEntries",
     *        methods = {"POST"}
     * )
     */
    public function handleSelectedEntriesAction(
        Request $request,
        LoggerInterface $logger,
        EntityFactory $entityFactory,
        WorkflowHelper $workflowHelper,
        CurrentUserApiInterface $currentUserApi
    ): RedirectResponse {
        return $this->handleSelectedEntriesActionInternal(
            $request,
            $logger,
            $entityFactory,
            $workflowHelper,
            $currentUserApi,
            false
        );
    }
    
    // feel free to add your own controller methods here
    /**
     *
     * @Route("/levels/display/{level}",
     *        methods = {"GET", "POST"}
     * )
     */
    public function levelsDisplayAction(
        Request $request,
        LevelEntity $level,
        PermissionHelper $permissionHelper,
        AssetFilter $assetFilter): Response
    {
        //Make sure that the user is logged in, otherwise go to the registration page
        if(!$permissionHelper->hasEntityPermission($level, ACCESS_COMMENT)){
            return $this->render('@PaustianMelodyMixerModule/Navi/registerfirst.html.twig');
        }

        $output = $this->renderView('@PaustianMelodyMixerModule/Level/displayLevel.html.twig', ['level' => $level]);
        $output = $assetFilter->filter($output);
        return new PlainResponse($output);
    }

    /**
     *
     * @Route("/levels/filllevel", methods = {"GET", "POST"})
     *
     * @Theme("admin")
     */
    public function fillLevelAction(
        Request $request,
        PermissionHelper $permissionHelper,
        WorkflowHelper $workflowHelper) : Response{
        if(!$permissionHelper->hasPermission(ACCESS_ADMIN)){
            throw new AccessDeniedException();
        }
        $form = $this->createForm(FillLevelType::class);

        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $levelName = $form->get('levelname')->getData();
            $levelNumber = (int)$form->get('levelnumber')->getData();
            $numExamples = (int)$form->get('numexamples')->getData() + 1;
            if(($levelName !== null) && ($levelNumber !== null)){
                for($i = 1; $i < $numExamples; $i++){
                    $level = new LevelEntity();
                    $level->setLevelName($levelName);
                    $level->setLevelNum($levelNumber);
                    $level->setExNum($i);
                    $workflowHelper->executeAction($level, 'submit');
                }
            }
            $this->addFlash('status', $this->trans('Levels Created'));
        }
        return $this->render('@PaustianMelodyMixerModule/Level/fillLevel.html.twig', ['form' => $form->createView()]);
    }

}
