<?php

/**
 * MelodyMixer.
 *
 * @copyright Timothy Paustian (Paustian)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Timothy Paustian <tdpaustian@gmail.com>.
 * @see https://www.microbiologytextbook.com
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Paustian\MelodyMixerModule\Form\Type\Base;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\ResetType;
use Symfony\Component\Form\Extension\Core\Type\SubmitType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Translation\Extractor\Annotation\Ignore;
use Translation\Extractor\Annotation\Translate;
use Paustian\MelodyMixerModule\Entity\Factory\EntityFactory;
use Paustian\MelodyMixerModule\Entity\ScoreEntity;
use Paustian\MelodyMixerModule\Helper\ListEntriesHelper;
use Paustian\MelodyMixerModule\Traits\ModerationFormFieldsTrait;

/**
 * Score editing form type base class.
 */
abstract class AbstractScoreType extends AbstractType
{
    use ModerationFormFieldsTrait;

    /**
     * @var EntityFactory
     */
    protected $entityFactory;

    /**
     * @var ListEntriesHelper
     */
    protected $listHelper;

    public function __construct(
        EntityFactory $entityFactory,
        ListEntriesHelper $listHelper
    ) {
        $this->entityFactory = $entityFactory;
        $this->listHelper = $listHelper;
    }

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addEntityFields($builder, $options);
        $this->addModerationFields($builder, $options);
        $this->addSubmitButtons($builder, $options);
    }

    /**
     * Adds basic entity fields.
     */
    public function addEntityFields(FormBuilderInterface $builder, array $options = []): void
    {
        
        $builder->add('levelId', IntegerType::class, [
            'label' => 'Level id:',
            'empty_data' => 0,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'title' => 'Enter the level id of the score. Only digits are allowed.'
            ],
            'required' => true,
        ]);
        
        $builder->add('playerUid', IntegerType::class, [
            'label' => 'Player uid:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'The uid of the player'
            ],
            'help' => 'The uid of the player',
            'empty_data' => 0,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'title' => 'Enter the player uid of the score. Only digits are allowed.'
            ],
            'required' => true,
        ]);
        
        $builder->add('levelName', TextType::class, [
            'label' => 'Level name:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'The name of the level'
            ],
            'help' => 'The name of the level',
            'empty_data' => '',
            'attr' => [
                'maxlength' => 255,
                'class' => '',
                'title' => 'Enter the level name of the score.'
            ],
            'required' => true,
        ]);
        
        $builder->add('scoreOne', IntegerType::class, [
            'label' => 'Score one:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Score on the first level'
            ],
            /** @Ignore */
            'help' => [
                /** @Translate */'Score on the first level',
                /** @Translate */'Note: this value must not be greater than %maxValue%.',
            ],
            'help_translation_parameters' => ['%maxValue%' => 100],
            'empty_data' => 0,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'max' => 100,
                'title' => 'Enter the score one of the score. Only digits are allowed.'
            ],
            'required' => false,
        ]);
        
        $builder->add('scoreTwo', IntegerType::class, [
            'label' => 'Score two:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Score on the 2nd level'
            ],
            /** @Ignore */
            'help' => [
                /** @Translate */'Score on the 2nd level',
                /** @Translate */'Note: this value must not be greater than %maxValue%.',
            ],
            'help_translation_parameters' => ['%maxValue%' => 100],
            'empty_data' => 0,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'max' => 100,
                'title' => 'Enter the score two of the score. Only digits are allowed.'
            ],
            'required' => false,
        ]);
        
        $builder->add('scoreThree', IntegerType::class, [
            'label' => 'Score three:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Score on the third level'
            ],
            /** @Ignore */
            'help' => [
                /** @Translate */'Score on the third level',
                /** @Translate */'Note: this value must not be greater than %maxValue%.',
            ],
            'help_translation_parameters' => ['%maxValue%' => 100],
            'empty_data' => 0,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'max' => 100,
                'title' => 'Enter the score three of the score. Only digits are allowed.'
            ],
            'required' => false,
        ]);
        
        $builder->add('scoreFour', IntegerType::class, [
            'label' => 'Score four:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Score on the fourth level'
            ],
            /** @Ignore */
            'help' => [
                /** @Translate */'Score on the fourth level',
                /** @Translate */'Note: this value must not be greater than %maxValue%.',
            ],
            'help_translation_parameters' => ['%maxValue%' => 100],
            'empty_data' => 0,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'max' => 100,
                'title' => 'Enter the score four of the score. Only digits are allowed.'
            ],
            'required' => false,
        ]);
        
        $builder->add('scoreFive', IntegerType::class, [
            'label' => 'Score five:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Score on the fifth level'
            ],
            /** @Ignore */
            'help' => [
                /** @Translate */'Score on the fifth level',
                /** @Translate */'Note: this value must not be greater than %maxValue%.',
            ],
            'help_translation_parameters' => ['%maxValue%' => 100],
            'empty_data' => 0,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'max' => 100,
                'title' => 'Enter the score five of the score. Only digits are allowed.'
            ],
            'required' => false,
        ]);
        
        $builder->add('scoreSix', IntegerType::class, [
            'label' => 'Score six:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Score on the sixth level'
            ],
            /** @Ignore */
            'help' => [
                /** @Translate */'Score on the sixth level',
                /** @Translate */'Note: this value must not be greater than %maxValue%.',
            ],
            'help_translation_parameters' => ['%maxValue%' => 100],
            'empty_data' => 0,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'max' => 100,
                'title' => 'Enter the score six of the score. Only digits are allowed.'
            ],
            'required' => false,
        ]);
        
        $builder->add('scoreSeven', IntegerType::class, [
            'label' => 'Score seven:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Score on the seventh level'
            ],
            /** @Ignore */
            'help' => [
                /** @Translate */'Score on the seventh level',
                /** @Translate */'Note: this value must not be greater than %maxValue%.',
            ],
            'help_translation_parameters' => ['%maxValue%' => 100],
            'empty_data' => 0,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'max' => 100,
                'title' => 'Enter the score seven of the score. Only digits are allowed.'
            ],
            'required' => false,
        ]);
        
        $builder->add('scoreEight', IntegerType::class, [
            'label' => 'Score eight:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Score on the eighth level'
            ],
            /** @Ignore */
            'help' => [
                /** @Translate */'Score on the eighth level',
                /** @Translate */'Note: this value must not be greater than %maxValue%.',
            ],
            'help_translation_parameters' => ['%maxValue%' => 100],
            'empty_data' => 0,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'max' => 100,
                'title' => 'Enter the score eight of the score. Only digits are allowed.'
            ],
            'required' => false,
        ]);
        
        $builder->add('scoreNine', IntegerType::class, [
            'label' => 'Score nine:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Score on the ninth level'
            ],
            /** @Ignore */
            'help' => [
                /** @Translate */'Score on the ninth level',
                /** @Translate */'Note: this value must not be greater than %maxValue%.',
            ],
            'help_translation_parameters' => ['%maxValue%' => 100],
            'empty_data' => 0,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'max' => 100,
                'title' => 'Enter the score nine of the score. Only digits are allowed.'
            ],
            'required' => false,
        ]);
        
        $builder->add('scoreTen', IntegerType::class, [
            'label' => 'Score ten:',
            'label_attr' => [
                'class' => 'tooltips',
                'title' => 'Score on the tenth level'
            ],
            /** @Ignore */
            'help' => [
                /** @Translate */'Score on the tenth level',
                /** @Translate */'Note: this value must not be greater than %maxValue%.',
            ],
            'help_translation_parameters' => ['%maxValue%' => 100],
            'empty_data' => 0,
            'attr' => [
                'maxlength' => 11,
                'class' => '',
                'max' => 100,
                'title' => 'Enter the score ten of the score. Only digits are allowed.'
            ],
            'required' => false,
        ]);
    }

    /**
     * Adds submit buttons.
     */
    public function addSubmitButtons(FormBuilderInterface $builder, array $options = []): void
    {
        foreach ($options['actions'] as $action) {
            $builder->add($action['id'], SubmitType::class, [
                /** @Ignore */
                'label' => $action['title'],
                'icon' => 'delete' === $action['id'] ? 'fa-trash-alt' : '',
                'attr' => [
                    'class' => $action['buttonClass']
                ]
            ]);
            if ('create' === $options['mode'] && 'submit' === $action['id']) {
                // add additional button to submit item and return to create form
                $builder->add('submitrepeat', SubmitType::class, [
                    'label' => 'Submit and repeat',
                    'icon' => 'fa-repeat',
                    'attr' => [
                        'class' => $action['buttonClass']
                    ]
                ]);
            }
        }
        $builder->add('reset', ResetType::class, [
            'label' => 'Reset',
            'icon' => 'fa-sync',
            'attr' => [
                'formnovalidate' => 'formnovalidate'
            ]
        ]);
        $builder->add('cancel', SubmitType::class, [
            'label' => 'Cancel',
            'validate' => false,
            'icon' => 'fa-times'
        ]);
    }

    public function getBlockPrefix()
    {
        return 'paustianmelodymixermodule_score';
    }

    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver
            ->setDefaults([
                // define class for underlying data (required for embedding forms)
                'data_class' => ScoreEntity::class,
                'translation_domain' => 'score',
                'empty_data' => function (FormInterface $form) {
                    return $this->entityFactory->createScore();
                },
                'error_mapping' => [
                ],
                'mode' => 'create',
                'actions' => [],
                'has_moderate_permission' => false,
                'allow_moderation_specific_creator' => false,
                'allow_moderation_specific_creation_date' => false,
            ])
            ->setRequired(['mode', 'actions'])
            ->setAllowedTypes('mode', 'string')
            ->setAllowedTypes('actions', 'array')
            ->setAllowedTypes('has_moderate_permission', 'bool')
            ->setAllowedTypes('allow_moderation_specific_creator', 'bool')
            ->setAllowedTypes('allow_moderation_specific_creation_date', 'bool')
            ->setAllowedValues('mode', ['create', 'edit'])
        ;
    }
}
