<?php

/**
 * MelodyMixer.
 *
 * @copyright Timothy Paustian (Paustian)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Timothy Paustian <tdpaustian@gmail.com>.
 * @see https://www.microbiologytextbook.com
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Paustian\MelodyMixerModule\Helper\Base;

use Symfony\Contracts\Translation\TranslatorInterface;
use Zikula\Bundle\CoreBundle\Doctrine\EntityAccess;
use Paustian\MelodyMixerModule\Entity\GameScoreEntity;
use Paustian\MelodyMixerModule\Entity\ScoreEntity;
use Paustian\MelodyMixerModule\Entity\LevelEntity;
use Paustian\MelodyMixerModule\Entity\GraphicsAndSoundEntity;
use Paustian\MelodyMixerModule\Entity\MusicScoreEntity;
use Paustian\MelodyMixerModule\Helper\ListEntriesHelper;

/**
 * Entity display helper base class.
 */
abstract class AbstractEntityDisplayHelper
{
    /**
     * @var TranslatorInterface
     */
    protected $translator;
    
    /**
     * @var ListEntriesHelper Helper service for managing list entries
     */
    protected $listEntriesHelper;
    
    public function __construct(
        TranslatorInterface $translator,
        ListEntriesHelper $listEntriesHelper
    ) {
        $this->translator = $translator;
        $this->listEntriesHelper = $listEntriesHelper;
    }
    
    /**
     * Returns the formatted title for a given entity.
     */
    public function getFormattedTitle(EntityAccess $entity): string
    {
        if ($entity instanceof GameScoreEntity) {
            return $this->formatGameScore($entity);
        }
        if ($entity instanceof ScoreEntity) {
            return $this->formatScore($entity);
        }
        if ($entity instanceof LevelEntity) {
            return $this->formatLevel($entity);
        }
        if ($entity instanceof GraphicsAndSoundEntity) {
            return $this->formatGraphicsAndSound($entity);
        }
        if ($entity instanceof MusicScoreEntity) {
            return $this->formatMusicScore($entity);
        }
    
        return '';
    }
    
    /**
     * Returns the formatted title for a given entity.
     */
    protected function formatGameScore(GameScoreEntity $entity): string
    {
        return $this->translator->trans(
            '%lastName,%firstName',
            [
                '%firstName%' => $entity->getFirstName()
            ],
            'gameScore'
        );
    }
    
    /**
     * Returns the formatted title for a given entity.
     */
    protected function formatScore(ScoreEntity $entity): string
    {
        return $this->translator->trans(
            '%levelName',
            [
                '%levelName%' => $entity->getLevelName()
            ],
            'score'
        );
    }
    
    /**
     * Returns the formatted title for a given entity.
     */
    protected function formatLevel(LevelEntity $entity): string
    {
        return $this->translator->trans(
            '%levelName',
            [
                '%levelName%' => $entity->getLevelName()
            ],
            'level'
        );
    }
    
    /**
     * Returns the formatted title for a given entity.
     */
    protected function formatGraphicsAndSound(GraphicsAndSoundEntity $entity): string
    {
        return $this->translator->trans(
            '%levelId,%gsName,%gsPath',
            [
                '%gsPath%' => $entity->getGsPath()
            ],
            'graphicsAndSound'
        );
    }
    
    /**
     * Returns the formatted title for a given entity.
     */
    protected function formatMusicScore(MusicScoreEntity $entity): string
    {
        return $this->translator->trans(
            '%levelId,%gsGraphic,%gsMidi',
            [
                '%gsMidi%' => $entity->getGsMidi()
            ],
            'musicScore'
        );
    }
    
    /**
     * Returns name of the field used as title / name for entities of this repository.
     */
    public function getTitleFieldName(string $objectType = ''): string
    {
        if ('gameScore' === $objectType) {
            return 'firstName';
        }
        if ('score' === $objectType) {
            return 'levelName';
        }
        if ('level' === $objectType) {
            return 'levelName';
        }
        if ('graphicsAndSound' === $objectType) {
            return 'gsName';
        }
        if ('musicScore' === $objectType) {
            return 'gsGraphic';
        }
    
        return '';
    }
    
    /**
     * Returns name of the field used for describing entities of this repository.
     */
    public function getDescriptionFieldName(string $objectType = ''): string
    {
        if ('gameScore' === $objectType) {
            return 'lastName';
        }
        if ('score' === $objectType) {
            return 'levelName';
        }
        if ('level' === $objectType) {
            return 'levelName';
        }
        if ('graphicsAndSound' === $objectType) {
            return 'descText';
        }
        if ('musicScore' === $objectType) {
            return 'gsMidi';
        }
    
        return '';
    }
    
    /**
     * Returns name of the date(time) field to be used for representing the start
     * of this object. Used for providing meta data to the tag module.
     */
    public function getStartDateFieldName(string $objectType = ''): string
    {
        if ('gameScore' === $objectType) {
            return 'createdDate';
        }
        if ('score' === $objectType) {
            return 'createdDate';
        }
        if ('level' === $objectType) {
            return 'createdDate';
        }
        if ('graphicsAndSound' === $objectType) {
            return 'createdDate';
        }
        if ('musicScore' === $objectType) {
            return 'createdDate';
        }
    
        return '';
    }
}
