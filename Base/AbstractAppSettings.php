<?php

/**
 * MelodyMixer.
 *
 * @copyright Timothy Paustian (Paustian)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Timothy Paustian <tdpaustian@gmail.com>.
 * @see https://www.microbiologytextbook.com
 * @see https://ziku.la
 * @version Generated by ModuleStudio 1.4.0 (https://modulestudio.de).
 */

declare(strict_types=1);

namespace Paustian\MelodyMixerModule\Base;

use Symfony\Component\Validator\Constraints as Assert;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use Paustian\MelodyMixerModule\Validator\Constraints as MelodyMixerAssert;

/**
 * Application settings class for handling module variables.
 */
abstract class AbstractAppSettings
{
    /**
     * @var VariableApiInterface
     */
    protected $variableApi;
    
    /**
     * The amount of game scores shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var int $gameScoreEntriesPerPage
     */
    protected $gameScoreEntriesPerPage = 10;
    
    /**
     * The amount of scores shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var int $scoreEntriesPerPage
     */
    protected $scoreEntriesPerPage = 10;
    
    /**
     * The amount of levels shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var int $levelEntriesPerPage
     */
    protected $levelEntriesPerPage = 10;
    
    /**
     * The amount of graphics and sound shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var int $graphicsAndSoundEntriesPerPage
     */
    protected $graphicsAndSoundEntriesPerPage = 10;
    
    /**
     * The amount of music scores shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var int $musicScoreEntriesPerPage
     */
    protected $musicScoreEntriesPerPage = 10;
    
    /**
     * Whether only own entries should be shown on view pages by default or not
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     * @var bool $showOnlyOwnEntries
     */
    protected $showOnlyOwnEntries = false;
    
    /**
     * Whether to allow moderators choosing a user which will be set as creator.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     * @var bool $allowModerationSpecificCreatorForGameScore
     */
    protected $allowModerationSpecificCreatorForGameScore = false;
    
    /**
     * Whether to allow moderators choosing a custom creation date.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     * @var bool $allowModerationSpecificCreationDateForGameScore
     */
    protected $allowModerationSpecificCreationDateForGameScore = false;
    
    /**
     * Whether to allow moderators choosing a user which will be set as creator.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     * @var bool $allowModerationSpecificCreatorForScore
     */
    protected $allowModerationSpecificCreatorForScore = false;
    
    /**
     * Whether to allow moderators choosing a custom creation date.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     * @var bool $allowModerationSpecificCreationDateForScore
     */
    protected $allowModerationSpecificCreationDateForScore = false;
    
    /**
     * Whether to allow moderators choosing a user which will be set as creator.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     * @var bool $allowModerationSpecificCreatorForLevel
     */
    protected $allowModerationSpecificCreatorForLevel = false;
    
    /**
     * Whether to allow moderators choosing a custom creation date.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     * @var bool $allowModerationSpecificCreationDateForLevel
     */
    protected $allowModerationSpecificCreationDateForLevel = false;
    
    /**
     * Whether to allow moderators choosing a user which will be set as creator.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     * @var bool $allowModerationSpecificCreatorForGraphicsAndSound
     */
    protected $allowModerationSpecificCreatorForGraphicsAndSound = false;
    
    /**
     * Whether to allow moderators choosing a custom creation date.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     * @var bool $allowModerationSpecificCreationDateForGraphicsAndSound
     */
    protected $allowModerationSpecificCreationDateForGraphicsAndSound = false;
    
    /**
     * Whether to allow moderators choosing a user which will be set as creator.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     * @var bool $allowModerationSpecificCreatorForMusicScore
     */
    protected $allowModerationSpecificCreatorForMusicScore = false;
    
    /**
     * Whether to allow moderators choosing a custom creation date.
     *
     * @Assert\NotNull
     * @Assert\Type(type="bool")
     * @var bool $allowModerationSpecificCreationDateForMusicScore
     */
    protected $allowModerationSpecificCreationDateForMusicScore = false;
    
    /**
     * Which sections are supported in the Finder component (used by Scribite plug-ins).
     *
     * @Assert\NotNull
     * @MelodyMixerAssert\ListEntry(entityName="appSettings", propertyName="enabledFinderTypes", multiple=true)
     * @var string $enabledFinderTypes
     */
    protected $enabledFinderTypes = '';
    
    
    public function __construct(
        VariableApiInterface $variableApi
    ) {
        $this->variableApi = $variableApi;
    
        $this->load();
    }
    
    public function getGameScoreEntriesPerPage(): int
    {
        return $this->gameScoreEntriesPerPage;
    }
    
    public function setGameScoreEntriesPerPage(int $gameScoreEntriesPerPage): void
    {
        if ((int)$this->gameScoreEntriesPerPage !== $gameScoreEntriesPerPage) {
            $this->gameScoreEntriesPerPage = $gameScoreEntriesPerPage;
        }
    }
    
    public function getScoreEntriesPerPage(): int
    {
        return $this->scoreEntriesPerPage;
    }
    
    public function setScoreEntriesPerPage(int $scoreEntriesPerPage): void
    {
        if ((int)$this->scoreEntriesPerPage !== $scoreEntriesPerPage) {
            $this->scoreEntriesPerPage = $scoreEntriesPerPage;
        }
    }
    
    public function getLevelEntriesPerPage(): int
    {
        return $this->levelEntriesPerPage;
    }
    
    public function setLevelEntriesPerPage(int $levelEntriesPerPage): void
    {
        if ((int)$this->levelEntriesPerPage !== $levelEntriesPerPage) {
            $this->levelEntriesPerPage = $levelEntriesPerPage;
        }
    }
    
    public function getGraphicsAndSoundEntriesPerPage(): int
    {
        return $this->graphicsAndSoundEntriesPerPage;
    }
    
    public function setGraphicsAndSoundEntriesPerPage(int $graphicsAndSoundEntriesPerPage): void
    {
        if ((int)$this->graphicsAndSoundEntriesPerPage !== $graphicsAndSoundEntriesPerPage) {
            $this->graphicsAndSoundEntriesPerPage = $graphicsAndSoundEntriesPerPage;
        }
    }
    
    public function getMusicScoreEntriesPerPage(): int
    {
        return $this->musicScoreEntriesPerPage;
    }
    
    public function setMusicScoreEntriesPerPage(int $musicScoreEntriesPerPage): void
    {
        if ((int)$this->musicScoreEntriesPerPage !== $musicScoreEntriesPerPage) {
            $this->musicScoreEntriesPerPage = $musicScoreEntriesPerPage;
        }
    }
    
    public function getShowOnlyOwnEntries(): bool
    {
        return $this->showOnlyOwnEntries;
    }
    
    public function setShowOnlyOwnEntries(bool $showOnlyOwnEntries): void
    {
        if ((bool)$this->showOnlyOwnEntries !== $showOnlyOwnEntries) {
            $this->showOnlyOwnEntries = $showOnlyOwnEntries;
        }
    }
    
    public function getAllowModerationSpecificCreatorForGameScore(): bool
    {
        return $this->allowModerationSpecificCreatorForGameScore;
    }
    
    public function setAllowModerationSpecificCreatorForGameScore(bool $allowModerationSpecificCreatorForGameScore): void
    {
        if ((bool)$this->allowModerationSpecificCreatorForGameScore !== $allowModerationSpecificCreatorForGameScore) {
            $this->allowModerationSpecificCreatorForGameScore = $allowModerationSpecificCreatorForGameScore;
        }
    }
    
    public function getAllowModerationSpecificCreationDateForGameScore(): bool
    {
        return $this->allowModerationSpecificCreationDateForGameScore;
    }
    
    public function setAllowModerationSpecificCreationDateForGameScore(bool $allowModerationSpecificCreationDateForGameScore): void
    {
        if ((bool)$this->allowModerationSpecificCreationDateForGameScore !== $allowModerationSpecificCreationDateForGameScore) {
            $this->allowModerationSpecificCreationDateForGameScore = $allowModerationSpecificCreationDateForGameScore;
        }
    }
    
    public function getAllowModerationSpecificCreatorForScore(): bool
    {
        return $this->allowModerationSpecificCreatorForScore;
    }
    
    public function setAllowModerationSpecificCreatorForScore(bool $allowModerationSpecificCreatorForScore): void
    {
        if ((bool)$this->allowModerationSpecificCreatorForScore !== $allowModerationSpecificCreatorForScore) {
            $this->allowModerationSpecificCreatorForScore = $allowModerationSpecificCreatorForScore;
        }
    }
    
    public function getAllowModerationSpecificCreationDateForScore(): bool
    {
        return $this->allowModerationSpecificCreationDateForScore;
    }
    
    public function setAllowModerationSpecificCreationDateForScore(bool $allowModerationSpecificCreationDateForScore): void
    {
        if ((bool)$this->allowModerationSpecificCreationDateForScore !== $allowModerationSpecificCreationDateForScore) {
            $this->allowModerationSpecificCreationDateForScore = $allowModerationSpecificCreationDateForScore;
        }
    }
    
    public function getAllowModerationSpecificCreatorForLevel(): bool
    {
        return $this->allowModerationSpecificCreatorForLevel;
    }
    
    public function setAllowModerationSpecificCreatorForLevel(bool $allowModerationSpecificCreatorForLevel): void
    {
        if ((bool)$this->allowModerationSpecificCreatorForLevel !== $allowModerationSpecificCreatorForLevel) {
            $this->allowModerationSpecificCreatorForLevel = $allowModerationSpecificCreatorForLevel;
        }
    }
    
    public function getAllowModerationSpecificCreationDateForLevel(): bool
    {
        return $this->allowModerationSpecificCreationDateForLevel;
    }
    
    public function setAllowModerationSpecificCreationDateForLevel(bool $allowModerationSpecificCreationDateForLevel): void
    {
        if ((bool)$this->allowModerationSpecificCreationDateForLevel !== $allowModerationSpecificCreationDateForLevel) {
            $this->allowModerationSpecificCreationDateForLevel = $allowModerationSpecificCreationDateForLevel;
        }
    }
    
    public function getAllowModerationSpecificCreatorForGraphicsAndSound(): bool
    {
        return $this->allowModerationSpecificCreatorForGraphicsAndSound;
    }
    
    public function setAllowModerationSpecificCreatorForGraphicsAndSound(bool $allowModerationSpecificCreatorForGraphicsAndSound): void
    {
        if ((bool)$this->allowModerationSpecificCreatorForGraphicsAndSound !== $allowModerationSpecificCreatorForGraphicsAndSound) {
            $this->allowModerationSpecificCreatorForGraphicsAndSound = $allowModerationSpecificCreatorForGraphicsAndSound;
        }
    }
    
    public function getAllowModerationSpecificCreationDateForGraphicsAndSound(): bool
    {
        return $this->allowModerationSpecificCreationDateForGraphicsAndSound;
    }
    
    public function setAllowModerationSpecificCreationDateForGraphicsAndSound(bool $allowModerationSpecificCreationDateForGraphicsAndSound): void
    {
        if ((bool)$this->allowModerationSpecificCreationDateForGraphicsAndSound !== $allowModerationSpecificCreationDateForGraphicsAndSound) {
            $this->allowModerationSpecificCreationDateForGraphicsAndSound = $allowModerationSpecificCreationDateForGraphicsAndSound;
        }
    }
    
    public function getAllowModerationSpecificCreatorForMusicScore(): bool
    {
        return $this->allowModerationSpecificCreatorForMusicScore;
    }
    
    public function setAllowModerationSpecificCreatorForMusicScore(bool $allowModerationSpecificCreatorForMusicScore): void
    {
        if ((bool)$this->allowModerationSpecificCreatorForMusicScore !== $allowModerationSpecificCreatorForMusicScore) {
            $this->allowModerationSpecificCreatorForMusicScore = $allowModerationSpecificCreatorForMusicScore;
        }
    }
    
    public function getAllowModerationSpecificCreationDateForMusicScore(): bool
    {
        return $this->allowModerationSpecificCreationDateForMusicScore;
    }
    
    public function setAllowModerationSpecificCreationDateForMusicScore(bool $allowModerationSpecificCreationDateForMusicScore): void
    {
        if ((bool)$this->allowModerationSpecificCreationDateForMusicScore !== $allowModerationSpecificCreationDateForMusicScore) {
            $this->allowModerationSpecificCreationDateForMusicScore = $allowModerationSpecificCreationDateForMusicScore;
        }
    }
    
    public function getEnabledFinderTypes(): string
    {
        return $this->enabledFinderTypes;
    }
    
    public function setEnabledFinderTypes(string $enabledFinderTypes): void
    {
        if ($this->enabledFinderTypes !== $enabledFinderTypes) {
            $this->enabledFinderTypes = $enabledFinderTypes ?? '';
        }
    }
    
    /**
     * Loads module variables from the database.
     */
    protected function load(): void
    {
        $moduleVars = $this->variableApi->getAll('PaustianMelodyMixerModule');
    
        if (isset($moduleVars['gameScoreEntriesPerPage'])) {
            $this->setGameScoreEntriesPerPage($moduleVars['gameScoreEntriesPerPage']);
        }
        if (isset($moduleVars['scoreEntriesPerPage'])) {
            $this->setScoreEntriesPerPage($moduleVars['scoreEntriesPerPage']);
        }
        if (isset($moduleVars['levelEntriesPerPage'])) {
            $this->setLevelEntriesPerPage($moduleVars['levelEntriesPerPage']);
        }
        if (isset($moduleVars['graphicsAndSoundEntriesPerPage'])) {
            $this->setGraphicsAndSoundEntriesPerPage($moduleVars['graphicsAndSoundEntriesPerPage']);
        }
        if (isset($moduleVars['musicScoreEntriesPerPage'])) {
            $this->setMusicScoreEntriesPerPage($moduleVars['musicScoreEntriesPerPage']);
        }
        if (isset($moduleVars['showOnlyOwnEntries'])) {
            $this->setShowOnlyOwnEntries($moduleVars['showOnlyOwnEntries']);
        }
        if (isset($moduleVars['allowModerationSpecificCreatorForGameScore'])) {
            $this->setAllowModerationSpecificCreatorForGameScore($moduleVars['allowModerationSpecificCreatorForGameScore']);
        }
        if (isset($moduleVars['allowModerationSpecificCreationDateForGameScore'])) {
            $this->setAllowModerationSpecificCreationDateForGameScore($moduleVars['allowModerationSpecificCreationDateForGameScore']);
        }
        if (isset($moduleVars['allowModerationSpecificCreatorForScore'])) {
            $this->setAllowModerationSpecificCreatorForScore($moduleVars['allowModerationSpecificCreatorForScore']);
        }
        if (isset($moduleVars['allowModerationSpecificCreationDateForScore'])) {
            $this->setAllowModerationSpecificCreationDateForScore($moduleVars['allowModerationSpecificCreationDateForScore']);
        }
        if (isset($moduleVars['allowModerationSpecificCreatorForLevel'])) {
            $this->setAllowModerationSpecificCreatorForLevel($moduleVars['allowModerationSpecificCreatorForLevel']);
        }
        if (isset($moduleVars['allowModerationSpecificCreationDateForLevel'])) {
            $this->setAllowModerationSpecificCreationDateForLevel($moduleVars['allowModerationSpecificCreationDateForLevel']);
        }
        if (isset($moduleVars['allowModerationSpecificCreatorForGraphicsAndSound'])) {
            $this->setAllowModerationSpecificCreatorForGraphicsAndSound($moduleVars['allowModerationSpecificCreatorForGraphicsAndSound']);
        }
        if (isset($moduleVars['allowModerationSpecificCreationDateForGraphicsAndSound'])) {
            $this->setAllowModerationSpecificCreationDateForGraphicsAndSound($moduleVars['allowModerationSpecificCreationDateForGraphicsAndSound']);
        }
        if (isset($moduleVars['allowModerationSpecificCreatorForMusicScore'])) {
            $this->setAllowModerationSpecificCreatorForMusicScore($moduleVars['allowModerationSpecificCreatorForMusicScore']);
        }
        if (isset($moduleVars['allowModerationSpecificCreationDateForMusicScore'])) {
            $this->setAllowModerationSpecificCreationDateForMusicScore($moduleVars['allowModerationSpecificCreationDateForMusicScore']);
        }
        if (isset($moduleVars['enabledFinderTypes'])) {
            $this->setEnabledFinderTypes($moduleVars['enabledFinderTypes']);
        }
    }
    
    /**
     * Saves module variables into the database.
     */
    public function save(): void
    {
        $this->variableApi->set('PaustianMelodyMixerModule', 'gameScoreEntriesPerPage', $this->getGameScoreEntriesPerPage());
        $this->variableApi->set('PaustianMelodyMixerModule', 'scoreEntriesPerPage', $this->getScoreEntriesPerPage());
        $this->variableApi->set('PaustianMelodyMixerModule', 'levelEntriesPerPage', $this->getLevelEntriesPerPage());
        $this->variableApi->set('PaustianMelodyMixerModule', 'graphicsAndSoundEntriesPerPage', $this->getGraphicsAndSoundEntriesPerPage());
        $this->variableApi->set('PaustianMelodyMixerModule', 'musicScoreEntriesPerPage', $this->getMusicScoreEntriesPerPage());
        $this->variableApi->set('PaustianMelodyMixerModule', 'showOnlyOwnEntries', $this->getShowOnlyOwnEntries());
        $this->variableApi->set('PaustianMelodyMixerModule', 'allowModerationSpecificCreatorForGameScore', $this->getAllowModerationSpecificCreatorForGameScore());
        $this->variableApi->set('PaustianMelodyMixerModule', 'allowModerationSpecificCreationDateForGameScore', $this->getAllowModerationSpecificCreationDateForGameScore());
        $this->variableApi->set('PaustianMelodyMixerModule', 'allowModerationSpecificCreatorForScore', $this->getAllowModerationSpecificCreatorForScore());
        $this->variableApi->set('PaustianMelodyMixerModule', 'allowModerationSpecificCreationDateForScore', $this->getAllowModerationSpecificCreationDateForScore());
        $this->variableApi->set('PaustianMelodyMixerModule', 'allowModerationSpecificCreatorForLevel', $this->getAllowModerationSpecificCreatorForLevel());
        $this->variableApi->set('PaustianMelodyMixerModule', 'allowModerationSpecificCreationDateForLevel', $this->getAllowModerationSpecificCreationDateForLevel());
        $this->variableApi->set('PaustianMelodyMixerModule', 'allowModerationSpecificCreatorForGraphicsAndSound', $this->getAllowModerationSpecificCreatorForGraphicsAndSound());
        $this->variableApi->set('PaustianMelodyMixerModule', 'allowModerationSpecificCreationDateForGraphicsAndSound', $this->getAllowModerationSpecificCreationDateForGraphicsAndSound());
        $this->variableApi->set('PaustianMelodyMixerModule', 'allowModerationSpecificCreatorForMusicScore', $this->getAllowModerationSpecificCreatorForMusicScore());
        $this->variableApi->set('PaustianMelodyMixerModule', 'allowModerationSpecificCreationDateForMusicScore', $this->getAllowModerationSpecificCreationDateForMusicScore());
        $this->variableApi->set('PaustianMelodyMixerModule', 'enabledFinderTypes', $this->getEnabledFinderTypes());
    }
}
